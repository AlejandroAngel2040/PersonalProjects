import asyncio
import aiohttp
from bs4 import BeautifulSoup
import time
import pandas as pd

start_time = time.perf_counter()

cities = ['los_angeles']
months = ['january', 'february', 'march', 'april', 'may', 'june',
          'july', 'august', 'september', 'october', 'november', 'december']
years = ['2023']

base_url = "https://world-weather.info/forecast/usa/{}/{}-{}/"
headers = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.10 Safari/537.36"
}

Master_list = []


async def fetch_weather(session, city, year, month):
    url = base_url.format(city, month, year)
    try:
        async with session.get(url) as response:
            content = await response.text()
            soup = BeautifulSoup(content, 'html.parser')

            weather_data = []

            li_elements = soup.find_all('li', class_='ww-month-weekdays foreacast-archive')
            for li in li_elements:
                try:
                    day = li.find('div').text.strip()
                    condition = li.find('i').get('title', '').strip()
                    high = li.find('span').text.strip()
                    low = li.find('p').text.strip()

                    weather_data.append([city, year, month, day, condition, high, low])
                except Exception as e:
                    print(f"Error parsing one entry: {e}")
                    continue

            # Add individual rows to Master_list
            Master_list.extend(weather_data)

    except Exception as e:
        print(f"Error fetching {url}: {e}")


#async def main():
#    async with aiohttp.ClientSession(headers=headers) as session:
#        tasks = [
#            fetch_weather(session, city, year, month)
#            for city in cities
#            for year in years
#            for month in months
#        ]
#        await asyncio.gather(*tasks)

    # Create DataFrame and save
#    df = pd.DataFrame(Master_list, columns=['City', 'Year', 'Month', 'Day', 'Condition', 'High', 'Low'])
#    df.to_csv('weather_data.csv', index=False)
#    print("Saved to weather_data.csv")


#asyncio.run(main())

#end_time = time.perf_counter()
#print(f"Finished in {end_time - start_time:.2f} seconds")
print(Master_list)  # Display the final list of weather data